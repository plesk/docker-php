<?php
/**
 * ImageInspect
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;

use \ArrayAccess;
use \Docker\API\ObjectSerializer;

/**
 * ImageInspect Class Doc Comment
 *
 * @category Class
 * @description Information about an image in the local image cache.
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ImageInspect implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ImageInspect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'repoTags' => 'string[]',
        'repoDigests' => 'string[]',
        'parent' => 'string',
        'comment' => 'string',
        'created' => 'string',
        'dockerVersion' => 'string',
        'author' => 'string',
        'config' => '\Docker\API\Model\ImageConfig',
        'architecture' => 'string',
        'variant' => 'string',
        'os' => 'string',
        'osVersion' => 'string',
        'size' => 'int',
        'virtualSize' => 'int',
        'graphDriver' => '\Docker\API\Model\DriverData',
        'rootFS' => '\Docker\API\Model\ImageInspectRootFS',
        'metadata' => '\Docker\API\Model\ImageInspectMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'repoTags' => null,
        'repoDigests' => null,
        'parent' => null,
        'comment' => null,
        'created' => 'dateTime',
        'dockerVersion' => null,
        'author' => null,
        'config' => null,
        'architecture' => null,
        'variant' => null,
        'os' => null,
        'osVersion' => null,
        'size' => 'int64',
        'virtualSize' => 'int64',
        'graphDriver' => null,
        'rootFS' => null,
        'metadata' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'repoTags' => 'RepoTags',
        'repoDigests' => 'RepoDigests',
        'parent' => 'Parent',
        'comment' => 'Comment',
        'created' => 'Created',
        'dockerVersion' => 'DockerVersion',
        'author' => 'Author',
        'config' => 'Config',
        'architecture' => 'Architecture',
        'variant' => 'Variant',
        'os' => 'Os',
        'osVersion' => 'OsVersion',
        'size' => 'Size',
        'virtualSize' => 'VirtualSize',
        'graphDriver' => 'GraphDriver',
        'rootFS' => 'RootFS',
        'metadata' => 'Metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'repoTags' => 'setRepoTags',
        'repoDigests' => 'setRepoDigests',
        'parent' => 'setParent',
        'comment' => 'setComment',
        'created' => 'setCreated',
        'dockerVersion' => 'setDockerVersion',
        'author' => 'setAuthor',
        'config' => 'setConfig',
        'architecture' => 'setArchitecture',
        'variant' => 'setVariant',
        'os' => 'setOs',
        'osVersion' => 'setOsVersion',
        'size' => 'setSize',
        'virtualSize' => 'setVirtualSize',
        'graphDriver' => 'setGraphDriver',
        'rootFS' => 'setRootFS',
        'metadata' => 'setMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'repoTags' => 'getRepoTags',
        'repoDigests' => 'getRepoDigests',
        'parent' => 'getParent',
        'comment' => 'getComment',
        'created' => 'getCreated',
        'dockerVersion' => 'getDockerVersion',
        'author' => 'getAuthor',
        'config' => 'getConfig',
        'architecture' => 'getArchitecture',
        'variant' => 'getVariant',
        'os' => 'getOs',
        'osVersion' => 'getOsVersion',
        'size' => 'getSize',
        'virtualSize' => 'getVirtualSize',
        'graphDriver' => 'getGraphDriver',
        'rootFS' => 'getRootFS',
        'metadata' => 'getMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['repoTags'] = isset($data['repoTags']) ? $data['repoTags'] : null;
        $this->container['repoDigests'] = isset($data['repoDigests']) ? $data['repoDigests'] : null;
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['dockerVersion'] = isset($data['dockerVersion']) ? $data['dockerVersion'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['config'] = isset($data['config']) ? $data['config'] : null;
        $this->container['architecture'] = isset($data['architecture']) ? $data['architecture'] : null;
        $this->container['variant'] = isset($data['variant']) ? $data['variant'] : null;
        $this->container['os'] = isset($data['os']) ? $data['os'] : null;
        $this->container['osVersion'] = isset($data['osVersion']) ? $data['osVersion'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['virtualSize'] = isset($data['virtualSize']) ? $data['virtualSize'] : null;
        $this->container['graphDriver'] = isset($data['graphDriver']) ? $data['graphDriver'] : null;
        $this->container['rootFS'] = isset($data['rootFS']) ? $data['rootFS'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id ID is the content-addressable ID of an image.  This identifier is a content-addressable digest calculated from the image's configuration (which includes the digests of layers used by the image).  Note that this digest differs from the `RepoDigests` below, which holds digests of image manifests that reference the image.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets repoTags
     *
     * @return string[]
     */
    public function getRepoTags()
    {
        return $this->container['repoTags'];
    }

    /**
     * Sets repoTags
     *
     * @param string[] $repoTags List of image names/tags in the local image cache that reference this image.  Multiple image tags can refer to the same image, and this list may be empty if no tags reference the image, in which case the image is \"untagged\", in which case it can still be referenced by its ID.
     *
     * @return $this
     */
    public function setRepoTags($repoTags)
    {
        $this->container['repoTags'] = $repoTags;

        return $this;
    }

    /**
     * Gets repoDigests
     *
     * @return string[]
     */
    public function getRepoDigests()
    {
        return $this->container['repoDigests'];
    }

    /**
     * Sets repoDigests
     *
     * @param string[] $repoDigests List of content-addressable digests of locally available image manifests that the image is referenced from. Multiple manifests can refer to the same image.  These digests are usually only available if the image was either pulled from a registry, or if the image was pushed to a registry, which is when the manifest is generated and its digest calculated.
     *
     * @return $this
     */
    public function setRepoDigests($repoDigests)
    {
        $this->container['repoDigests'] = $repoDigests;

        return $this;
    }

    /**
     * Gets parent
     *
     * @return string
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param string $parent ID of the parent image.  Depending on how the image was created, this field may be empty and is only set for images that were built/created locally. This field is empty if the image was pulled from an image registry.
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment Optional message that was set when committing or importing the image.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created Date and time at which the image was created, formatted in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.  This information is only available if present in the image, and omitted otherwise.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets dockerVersion
     *
     * @return string
     */
    public function getDockerVersion()
    {
        return $this->container['dockerVersion'];
    }

    /**
     * Sets dockerVersion
     *
     * @param string $dockerVersion The version of Docker that was used to build the image.  Depending on how the image was created, this field may be empty.
     *
     * @return $this
     */
    public function setDockerVersion($dockerVersion)
    {
        $this->container['dockerVersion'] = $dockerVersion;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author Name of the author that was specified when committing the image, or as specified through MAINTAINER (deprecated) in the Dockerfile.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets config
     *
     * @return \Docker\API\Model\ImageConfig
     */
    public function getConfig()
    {
        return $this->container['config'];
    }

    /**
     * Sets config
     *
     * @param \Docker\API\Model\ImageConfig $config config
     *
     * @return $this
     */
    public function setConfig($config)
    {
        $this->container['config'] = $config;

        return $this;
    }

    /**
     * Gets architecture
     *
     * @return string
     */
    public function getArchitecture()
    {
        return $this->container['architecture'];
    }

    /**
     * Sets architecture
     *
     * @param string $architecture Hardware CPU architecture that the image runs on.
     *
     * @return $this
     */
    public function setArchitecture($architecture)
    {
        $this->container['architecture'] = $architecture;

        return $this;
    }

    /**
     * Gets variant
     *
     * @return string
     */
    public function getVariant()
    {
        return $this->container['variant'];
    }

    /**
     * Sets variant
     *
     * @param string $variant CPU architecture variant (presently ARM-only).
     *
     * @return $this
     */
    public function setVariant($variant)
    {
        $this->container['variant'] = $variant;

        return $this;
    }

    /**
     * Gets os
     *
     * @return string
     */
    public function getOs()
    {
        return $this->container['os'];
    }

    /**
     * Sets os
     *
     * @param string $os Operating System the image is built to run on.
     *
     * @return $this
     */
    public function setOs($os)
    {
        $this->container['os'] = $os;

        return $this;
    }

    /**
     * Gets osVersion
     *
     * @return string
     */
    public function getOsVersion()
    {
        return $this->container['osVersion'];
    }

    /**
     * Sets osVersion
     *
     * @param string $osVersion Operating System version the image is built to run on (especially for Windows).
     *
     * @return $this
     */
    public function setOsVersion($osVersion)
    {
        $this->container['osVersion'] = $osVersion;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Total size of the image including all layers it is composed of.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets virtualSize
     *
     * @return int
     */
    public function getVirtualSize()
    {
        return $this->container['virtualSize'];
    }

    /**
     * Sets virtualSize
     *
     * @param int $virtualSize Total size of the image including all layers it is composed of.  Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
     *
     * @return $this
     */
    public function setVirtualSize($virtualSize)
    {
        $this->container['virtualSize'] = $virtualSize;

        return $this;
    }

    /**
     * Gets graphDriver
     *
     * @return \Docker\API\Model\DriverData
     */
    public function getGraphDriver()
    {
        return $this->container['graphDriver'];
    }

    /**
     * Sets graphDriver
     *
     * @param \Docker\API\Model\DriverData $graphDriver graphDriver
     *
     * @return $this
     */
    public function setGraphDriver($graphDriver)
    {
        $this->container['graphDriver'] = $graphDriver;

        return $this;
    }

    /**
     * Gets rootFS
     *
     * @return \Docker\API\Model\ImageInspectRootFS
     */
    public function getRootFS()
    {
        return $this->container['rootFS'];
    }

    /**
     * Sets rootFS
     *
     * @param \Docker\API\Model\ImageInspectRootFS $rootFS rootFS
     *
     * @return $this
     */
    public function setRootFS($rootFS)
    {
        $this->container['rootFS'] = $rootFS;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return \Docker\API\Model\ImageInspectMetadata
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param \Docker\API\Model\ImageInspectMetadata $metadata metadata
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
