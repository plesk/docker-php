<?php
/**
 * ContainerConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;

use \ArrayAccess;
use \Docker\API\ObjectSerializer;

/**
 * ContainerConfig Class Doc Comment
 *
 * @category Class
 * @description Configuration for a container that is portable between hosts.
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContainerConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContainerConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hostname' => 'string',
        'domainname' => 'string',
        'user' => 'string',
        'attachStdin' => 'bool',
        'attachStdout' => 'bool',
        'attachStderr' => 'bool',
        'exposedPorts' => 'map[string,object]',
        'tty' => 'bool',
        'openStdin' => 'bool',
        'stdinOnce' => 'bool',
        'env' => 'string[]',
        'cmd' => 'string[]',
        'healthcheck' => '\Docker\API\Model\HealthConfig',
        'argsEscaped' => 'bool',
        'image' => 'string',
        'volumes' => 'map[string,object]',
        'workingDir' => 'string',
        'entrypoint' => 'string[]',
        'networkDisabled' => 'bool',
        'macAddress' => 'string',
        'onBuild' => 'string[]',
        'labels' => 'map[string,string]',
        'stopSignal' => 'string',
        'stopTimeout' => 'int',
        'shell' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hostname' => null,
        'domainname' => null,
        'user' => null,
        'attachStdin' => null,
        'attachStdout' => null,
        'attachStderr' => null,
        'exposedPorts' => null,
        'tty' => null,
        'openStdin' => null,
        'stdinOnce' => null,
        'env' => null,
        'cmd' => null,
        'healthcheck' => null,
        'argsEscaped' => null,
        'image' => null,
        'volumes' => null,
        'workingDir' => null,
        'entrypoint' => null,
        'networkDisabled' => null,
        'macAddress' => null,
        'onBuild' => null,
        'labels' => null,
        'stopSignal' => null,
        'stopTimeout' => null,
        'shell' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hostname' => 'Hostname',
        'domainname' => 'Domainname',
        'user' => 'User',
        'attachStdin' => 'AttachStdin',
        'attachStdout' => 'AttachStdout',
        'attachStderr' => 'AttachStderr',
        'exposedPorts' => 'ExposedPorts',
        'tty' => 'Tty',
        'openStdin' => 'OpenStdin',
        'stdinOnce' => 'StdinOnce',
        'env' => 'Env',
        'cmd' => 'Cmd',
        'healthcheck' => 'Healthcheck',
        'argsEscaped' => 'ArgsEscaped',
        'image' => 'Image',
        'volumes' => 'Volumes',
        'workingDir' => 'WorkingDir',
        'entrypoint' => 'Entrypoint',
        'networkDisabled' => 'NetworkDisabled',
        'macAddress' => 'MacAddress',
        'onBuild' => 'OnBuild',
        'labels' => 'Labels',
        'stopSignal' => 'StopSignal',
        'stopTimeout' => 'StopTimeout',
        'shell' => 'Shell'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hostname' => 'setHostname',
        'domainname' => 'setDomainname',
        'user' => 'setUser',
        'attachStdin' => 'setAttachStdin',
        'attachStdout' => 'setAttachStdout',
        'attachStderr' => 'setAttachStderr',
        'exposedPorts' => 'setExposedPorts',
        'tty' => 'setTty',
        'openStdin' => 'setOpenStdin',
        'stdinOnce' => 'setStdinOnce',
        'env' => 'setEnv',
        'cmd' => 'setCmd',
        'healthcheck' => 'setHealthcheck',
        'argsEscaped' => 'setArgsEscaped',
        'image' => 'setImage',
        'volumes' => 'setVolumes',
        'workingDir' => 'setWorkingDir',
        'entrypoint' => 'setEntrypoint',
        'networkDisabled' => 'setNetworkDisabled',
        'macAddress' => 'setMacAddress',
        'onBuild' => 'setOnBuild',
        'labels' => 'setLabels',
        'stopSignal' => 'setStopSignal',
        'stopTimeout' => 'setStopTimeout',
        'shell' => 'setShell'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hostname' => 'getHostname',
        'domainname' => 'getDomainname',
        'user' => 'getUser',
        'attachStdin' => 'getAttachStdin',
        'attachStdout' => 'getAttachStdout',
        'attachStderr' => 'getAttachStderr',
        'exposedPorts' => 'getExposedPorts',
        'tty' => 'getTty',
        'openStdin' => 'getOpenStdin',
        'stdinOnce' => 'getStdinOnce',
        'env' => 'getEnv',
        'cmd' => 'getCmd',
        'healthcheck' => 'getHealthcheck',
        'argsEscaped' => 'getArgsEscaped',
        'image' => 'getImage',
        'volumes' => 'getVolumes',
        'workingDir' => 'getWorkingDir',
        'entrypoint' => 'getEntrypoint',
        'networkDisabled' => 'getNetworkDisabled',
        'macAddress' => 'getMacAddress',
        'onBuild' => 'getOnBuild',
        'labels' => 'getLabels',
        'stopSignal' => 'getStopSignal',
        'stopTimeout' => 'getStopTimeout',
        'shell' => 'getShell'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['hostname'] = isset($data['hostname']) ? $data['hostname'] : null;
        $this->container['domainname'] = isset($data['domainname']) ? $data['domainname'] : null;
        $this->container['user'] = isset($data['user']) ? $data['user'] : null;
        $this->container['attachStdin'] = isset($data['attachStdin']) ? $data['attachStdin'] : false;
        $this->container['attachStdout'] = isset($data['attachStdout']) ? $data['attachStdout'] : true;
        $this->container['attachStderr'] = isset($data['attachStderr']) ? $data['attachStderr'] : true;
        $this->container['exposedPorts'] = isset($data['exposedPorts']) ? $data['exposedPorts'] : null;
        $this->container['tty'] = isset($data['tty']) ? $data['tty'] : false;
        $this->container['openStdin'] = isset($data['openStdin']) ? $data['openStdin'] : false;
        $this->container['stdinOnce'] = isset($data['stdinOnce']) ? $data['stdinOnce'] : false;
        $this->container['env'] = isset($data['env']) ? $data['env'] : null;
        $this->container['cmd'] = isset($data['cmd']) ? $data['cmd'] : null;
        $this->container['healthcheck'] = isset($data['healthcheck']) ? $data['healthcheck'] : null;
        $this->container['argsEscaped'] = isset($data['argsEscaped']) ? $data['argsEscaped'] : false;
        $this->container['image'] = isset($data['image']) ? $data['image'] : null;
        $this->container['volumes'] = isset($data['volumes']) ? $data['volumes'] : null;
        $this->container['workingDir'] = isset($data['workingDir']) ? $data['workingDir'] : null;
        $this->container['entrypoint'] = isset($data['entrypoint']) ? $data['entrypoint'] : null;
        $this->container['networkDisabled'] = isset($data['networkDisabled']) ? $data['networkDisabled'] : null;
        $this->container['macAddress'] = isset($data['macAddress']) ? $data['macAddress'] : null;
        $this->container['onBuild'] = isset($data['onBuild']) ? $data['onBuild'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['stopSignal'] = isset($data['stopSignal']) ? $data['stopSignal'] : null;
        $this->container['stopTimeout'] = isset($data['stopTimeout']) ? $data['stopTimeout'] : null;
        $this->container['shell'] = isset($data['shell']) ? $data['shell'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hostname
     *
     * @return string
     */
    public function getHostname()
    {
        return $this->container['hostname'];
    }

    /**
     * Sets hostname
     *
     * @param string $hostname The hostname to use for the container, as a valid RFC 1123 hostname.
     *
     * @return $this
     */
    public function setHostname($hostname)
    {
        $this->container['hostname'] = $hostname;

        return $this;
    }

    /**
     * Gets domainname
     *
     * @return string
     */
    public function getDomainname()
    {
        return $this->container['domainname'];
    }

    /**
     * Sets domainname
     *
     * @param string $domainname The domain name to use for the container.
     *
     * @return $this
     */
    public function setDomainname($domainname)
    {
        $this->container['domainname'] = $domainname;

        return $this;
    }

    /**
     * Gets user
     *
     * @return string
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param string $user The user that commands are run as inside the container.
     *
     * @return $this
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets attachStdin
     *
     * @return bool
     */
    public function getAttachStdin()
    {
        return $this->container['attachStdin'];
    }

    /**
     * Sets attachStdin
     *
     * @param bool $attachStdin Whether to attach to `stdin`.
     *
     * @return $this
     */
    public function setAttachStdin($attachStdin)
    {
        $this->container['attachStdin'] = $attachStdin;

        return $this;
    }

    /**
     * Gets attachStdout
     *
     * @return bool
     */
    public function getAttachStdout()
    {
        return $this->container['attachStdout'];
    }

    /**
     * Sets attachStdout
     *
     * @param bool $attachStdout Whether to attach to `stdout`.
     *
     * @return $this
     */
    public function setAttachStdout($attachStdout)
    {
        $this->container['attachStdout'] = $attachStdout;

        return $this;
    }

    /**
     * Gets attachStderr
     *
     * @return bool
     */
    public function getAttachStderr()
    {
        return $this->container['attachStderr'];
    }

    /**
     * Sets attachStderr
     *
     * @param bool $attachStderr Whether to attach to `stderr`.
     *
     * @return $this
     */
    public function setAttachStderr($attachStderr)
    {
        $this->container['attachStderr'] = $attachStderr;

        return $this;
    }

    /**
     * Gets exposedPorts
     *
     * @return map[string,object]
     */
    public function getExposedPorts()
    {
        return $this->container['exposedPorts'];
    }

    /**
     * Sets exposedPorts
     *
     * @param map[string,object] $exposedPorts An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp|sctp>\": {}}`
     *
     * @return $this
     */
    public function setExposedPorts($exposedPorts)
    {
        $this->container['exposedPorts'] = $exposedPorts;

        return $this;
    }

    /**
     * Gets tty
     *
     * @return bool
     */
    public function getTty()
    {
        return $this->container['tty'];
    }

    /**
     * Sets tty
     *
     * @param bool $tty Attach standard streams to a TTY, including `stdin` if it is not closed.
     *
     * @return $this
     */
    public function setTty($tty)
    {
        $this->container['tty'] = $tty;

        return $this;
    }

    /**
     * Gets openStdin
     *
     * @return bool
     */
    public function getOpenStdin()
    {
        return $this->container['openStdin'];
    }

    /**
     * Sets openStdin
     *
     * @param bool $openStdin Open `stdin`
     *
     * @return $this
     */
    public function setOpenStdin($openStdin)
    {
        $this->container['openStdin'] = $openStdin;

        return $this;
    }

    /**
     * Gets stdinOnce
     *
     * @return bool
     */
    public function getStdinOnce()
    {
        return $this->container['stdinOnce'];
    }

    /**
     * Sets stdinOnce
     *
     * @param bool $stdinOnce Close `stdin` after one attached client disconnects
     *
     * @return $this
     */
    public function setStdinOnce($stdinOnce)
    {
        $this->container['stdinOnce'] = $stdinOnce;

        return $this;
    }

    /**
     * Gets env
     *
     * @return string[]
     */
    public function getEnv()
    {
        return $this->container['env'];
    }

    /**
     * Sets env
     *
     * @param string[] $env A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.
     *
     * @return $this
     */
    public function setEnv($env)
    {
        $this->container['env'] = $env;

        return $this;
    }

    /**
     * Gets cmd
     *
     * @return string[]
     */
    public function getCmd()
    {
        return $this->container['cmd'];
    }

    /**
     * Sets cmd
     *
     * @param string[] $cmd Command to run specified as a string or an array of strings.
     *
     * @return $this
     */
    public function setCmd($cmd)
    {
        $this->container['cmd'] = $cmd;

        return $this;
    }

    /**
     * Gets healthcheck
     *
     * @return \Docker\API\Model\HealthConfig
     */
    public function getHealthcheck()
    {
        return $this->container['healthcheck'];
    }

    /**
     * Sets healthcheck
     *
     * @param \Docker\API\Model\HealthConfig $healthcheck healthcheck
     *
     * @return $this
     */
    public function setHealthcheck($healthcheck)
    {
        $this->container['healthcheck'] = $healthcheck;

        return $this;
    }

    /**
     * Gets argsEscaped
     *
     * @return bool
     */
    public function getArgsEscaped()
    {
        return $this->container['argsEscaped'];
    }

    /**
     * Sets argsEscaped
     *
     * @param bool $argsEscaped Command is already escaped (Windows only)
     *
     * @return $this
     */
    public function setArgsEscaped($argsEscaped)
    {
        $this->container['argsEscaped'] = $argsEscaped;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string $image The name (or reference) of the image to use when creating the container, or which was used when the container was created.
     *
     * @return $this
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets volumes
     *
     * @return map[string,object]
     */
    public function getVolumes()
    {
        return $this->container['volumes'];
    }

    /**
     * Sets volumes
     *
     * @param map[string,object] $volumes An object mapping mount point paths inside the container to empty objects.
     *
     * @return $this
     */
    public function setVolumes($volumes)
    {
        $this->container['volumes'] = $volumes;

        return $this;
    }

    /**
     * Gets workingDir
     *
     * @return string
     */
    public function getWorkingDir()
    {
        return $this->container['workingDir'];
    }

    /**
     * Sets workingDir
     *
     * @param string $workingDir The working directory for commands to run in.
     *
     * @return $this
     */
    public function setWorkingDir($workingDir)
    {
        $this->container['workingDir'] = $workingDir;

        return $this;
    }

    /**
     * Gets entrypoint
     *
     * @return string[]
     */
    public function getEntrypoint()
    {
        return $this->container['entrypoint'];
    }

    /**
     * Sets entrypoint
     *
     * @param string[] $entrypoint The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).
     *
     * @return $this
     */
    public function setEntrypoint($entrypoint)
    {
        $this->container['entrypoint'] = $entrypoint;

        return $this;
    }

    /**
     * Gets networkDisabled
     *
     * @return bool
     */
    public function getNetworkDisabled()
    {
        return $this->container['networkDisabled'];
    }

    /**
     * Sets networkDisabled
     *
     * @param bool $networkDisabled Disable networking for the container.
     *
     * @return $this
     */
    public function setNetworkDisabled($networkDisabled)
    {
        $this->container['networkDisabled'] = $networkDisabled;

        return $this;
    }

    /**
     * Gets macAddress
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['macAddress'];
    }

    /**
     * Sets macAddress
     *
     * @param string $macAddress MAC address of the container.  Deprecated: this field is deprecated in API v1.44 and up. Use EndpointSettings.MacAddress instead.
     *
     * @return $this
     */
    public function setMacAddress($macAddress)
    {
        $this->container['macAddress'] = $macAddress;

        return $this;
    }

    /**
     * Gets onBuild
     *
     * @return string[]
     */
    public function getOnBuild()
    {
        return $this->container['onBuild'];
    }

    /**
     * Sets onBuild
     *
     * @param string[] $onBuild `ONBUILD` metadata that were defined in the image's `Dockerfile`.
     *
     * @return $this
     */
    public function setOnBuild($onBuild)
    {
        $this->container['onBuild'] = $onBuild;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return map[string,string]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param map[string,string] $labels User-defined key/value metadata.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets stopSignal
     *
     * @return string
     */
    public function getStopSignal()
    {
        return $this->container['stopSignal'];
    }

    /**
     * Sets stopSignal
     *
     * @param string $stopSignal Signal to stop a container as a string or unsigned integer.
     *
     * @return $this
     */
    public function setStopSignal($stopSignal)
    {
        $this->container['stopSignal'] = $stopSignal;

        return $this;
    }

    /**
     * Gets stopTimeout
     *
     * @return int
     */
    public function getStopTimeout()
    {
        return $this->container['stopTimeout'];
    }

    /**
     * Sets stopTimeout
     *
     * @param int $stopTimeout Timeout to stop a container in seconds.
     *
     * @return $this
     */
    public function setStopTimeout($stopTimeout)
    {
        $this->container['stopTimeout'] = $stopTimeout;

        return $this;
    }

    /**
     * Gets shell
     *
     * @return string[]
     */
    public function getShell()
    {
        return $this->container['shell'];
    }

    /**
     * Sets shell
     *
     * @param string[] $shell Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.
     *
     * @return $this
     */
    public function setShell($shell)
    {
        $this->container['shell'] = $shell;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
