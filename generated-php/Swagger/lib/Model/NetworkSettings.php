<?php
/**
 * NetworkSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;

use \ArrayAccess;
use \Docker\API\ObjectSerializer;

/**
 * NetworkSettings Class Doc Comment
 *
 * @category Class
 * @description NetworkSettings exposes the network settings in the API
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NetworkSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NetworkSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'bridge' => 'string',
        'sandboxID' => 'string',
        'hairpinMode' => 'bool',
        'linkLocalIPv6Address' => 'string',
        'linkLocalIPv6PrefixLen' => 'int',
        'ports' => '\Docker\API\Model\PortMap',
        'sandboxKey' => 'string',
        'secondaryIPAddresses' => '\Docker\API\Model\Address[]',
        'secondaryIPv6Addresses' => '\Docker\API\Model\Address[]',
        'endpointID' => 'string',
        'gateway' => 'string',
        'globalIPv6Address' => 'string',
        'globalIPv6PrefixLen' => 'int',
        'iPAddress' => 'string',
        'iPPrefixLen' => 'int',
        'iPv6Gateway' => 'string',
        'macAddress' => 'string',
        'networks' => 'map[string,\Docker\API\Model\EndpointSettings]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'bridge' => null,
        'sandboxID' => null,
        'hairpinMode' => null,
        'linkLocalIPv6Address' => null,
        'linkLocalIPv6PrefixLen' => null,
        'ports' => null,
        'sandboxKey' => null,
        'secondaryIPAddresses' => null,
        'secondaryIPv6Addresses' => null,
        'endpointID' => null,
        'gateway' => null,
        'globalIPv6Address' => null,
        'globalIPv6PrefixLen' => null,
        'iPAddress' => null,
        'iPPrefixLen' => null,
        'iPv6Gateway' => null,
        'macAddress' => null,
        'networks' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bridge' => 'Bridge',
        'sandboxID' => 'SandboxID',
        'hairpinMode' => 'HairpinMode',
        'linkLocalIPv6Address' => 'LinkLocalIPv6Address',
        'linkLocalIPv6PrefixLen' => 'LinkLocalIPv6PrefixLen',
        'ports' => 'Ports',
        'sandboxKey' => 'SandboxKey',
        'secondaryIPAddresses' => 'SecondaryIPAddresses',
        'secondaryIPv6Addresses' => 'SecondaryIPv6Addresses',
        'endpointID' => 'EndpointID',
        'gateway' => 'Gateway',
        'globalIPv6Address' => 'GlobalIPv6Address',
        'globalIPv6PrefixLen' => 'GlobalIPv6PrefixLen',
        'iPAddress' => 'IPAddress',
        'iPPrefixLen' => 'IPPrefixLen',
        'iPv6Gateway' => 'IPv6Gateway',
        'macAddress' => 'MacAddress',
        'networks' => 'Networks'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bridge' => 'setBridge',
        'sandboxID' => 'setSandboxID',
        'hairpinMode' => 'setHairpinMode',
        'linkLocalIPv6Address' => 'setLinkLocalIPv6Address',
        'linkLocalIPv6PrefixLen' => 'setLinkLocalIPv6PrefixLen',
        'ports' => 'setPorts',
        'sandboxKey' => 'setSandboxKey',
        'secondaryIPAddresses' => 'setSecondaryIPAddresses',
        'secondaryIPv6Addresses' => 'setSecondaryIPv6Addresses',
        'endpointID' => 'setEndpointID',
        'gateway' => 'setGateway',
        'globalIPv6Address' => 'setGlobalIPv6Address',
        'globalIPv6PrefixLen' => 'setGlobalIPv6PrefixLen',
        'iPAddress' => 'setIPAddress',
        'iPPrefixLen' => 'setIPPrefixLen',
        'iPv6Gateway' => 'setIPv6Gateway',
        'macAddress' => 'setMacAddress',
        'networks' => 'setNetworks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bridge' => 'getBridge',
        'sandboxID' => 'getSandboxID',
        'hairpinMode' => 'getHairpinMode',
        'linkLocalIPv6Address' => 'getLinkLocalIPv6Address',
        'linkLocalIPv6PrefixLen' => 'getLinkLocalIPv6PrefixLen',
        'ports' => 'getPorts',
        'sandboxKey' => 'getSandboxKey',
        'secondaryIPAddresses' => 'getSecondaryIPAddresses',
        'secondaryIPv6Addresses' => 'getSecondaryIPv6Addresses',
        'endpointID' => 'getEndpointID',
        'gateway' => 'getGateway',
        'globalIPv6Address' => 'getGlobalIPv6Address',
        'globalIPv6PrefixLen' => 'getGlobalIPv6PrefixLen',
        'iPAddress' => 'getIPAddress',
        'iPPrefixLen' => 'getIPPrefixLen',
        'iPv6Gateway' => 'getIPv6Gateway',
        'macAddress' => 'getMacAddress',
        'networks' => 'getNetworks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['bridge'] = isset($data['bridge']) ? $data['bridge'] : null;
        $this->container['sandboxID'] = isset($data['sandboxID']) ? $data['sandboxID'] : null;
        $this->container['hairpinMode'] = isset($data['hairpinMode']) ? $data['hairpinMode'] : null;
        $this->container['linkLocalIPv6Address'] = isset($data['linkLocalIPv6Address']) ? $data['linkLocalIPv6Address'] : null;
        $this->container['linkLocalIPv6PrefixLen'] = isset($data['linkLocalIPv6PrefixLen']) ? $data['linkLocalIPv6PrefixLen'] : null;
        $this->container['ports'] = isset($data['ports']) ? $data['ports'] : null;
        $this->container['sandboxKey'] = isset($data['sandboxKey']) ? $data['sandboxKey'] : null;
        $this->container['secondaryIPAddresses'] = isset($data['secondaryIPAddresses']) ? $data['secondaryIPAddresses'] : null;
        $this->container['secondaryIPv6Addresses'] = isset($data['secondaryIPv6Addresses']) ? $data['secondaryIPv6Addresses'] : null;
        $this->container['endpointID'] = isset($data['endpointID']) ? $data['endpointID'] : null;
        $this->container['gateway'] = isset($data['gateway']) ? $data['gateway'] : null;
        $this->container['globalIPv6Address'] = isset($data['globalIPv6Address']) ? $data['globalIPv6Address'] : null;
        $this->container['globalIPv6PrefixLen'] = isset($data['globalIPv6PrefixLen']) ? $data['globalIPv6PrefixLen'] : null;
        $this->container['iPAddress'] = isset($data['iPAddress']) ? $data['iPAddress'] : null;
        $this->container['iPPrefixLen'] = isset($data['iPPrefixLen']) ? $data['iPPrefixLen'] : null;
        $this->container['iPv6Gateway'] = isset($data['iPv6Gateway']) ? $data['iPv6Gateway'] : null;
        $this->container['macAddress'] = isset($data['macAddress']) ? $data['macAddress'] : null;
        $this->container['networks'] = isset($data['networks']) ? $data['networks'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bridge
     *
     * @return string
     */
    public function getBridge()
    {
        return $this->container['bridge'];
    }

    /**
     * Sets bridge
     *
     * @param string $bridge Name of the default bridge interface when dockerd's --bridge flag is set.
     *
     * @return $this
     */
    public function setBridge($bridge)
    {
        $this->container['bridge'] = $bridge;

        return $this;
    }

    /**
     * Gets sandboxID
     *
     * @return string
     */
    public function getSandboxID()
    {
        return $this->container['sandboxID'];
    }

    /**
     * Sets sandboxID
     *
     * @param string $sandboxID SandboxID uniquely represents a container's network stack.
     *
     * @return $this
     */
    public function setSandboxID($sandboxID)
    {
        $this->container['sandboxID'] = $sandboxID;

        return $this;
    }

    /**
     * Gets hairpinMode
     *
     * @return bool
     */
    public function getHairpinMode()
    {
        return $this->container['hairpinMode'];
    }

    /**
     * Sets hairpinMode
     *
     * @param bool $hairpinMode Indicates if hairpin NAT should be enabled on the virtual interface.  Deprecated: This field is never set and will be removed in a future release.
     *
     * @return $this
     */
    public function setHairpinMode($hairpinMode)
    {
        $this->container['hairpinMode'] = $hairpinMode;

        return $this;
    }

    /**
     * Gets linkLocalIPv6Address
     *
     * @return string
     */
    public function getLinkLocalIPv6Address()
    {
        return $this->container['linkLocalIPv6Address'];
    }

    /**
     * Sets linkLocalIPv6Address
     *
     * @param string $linkLocalIPv6Address IPv6 unicast address using the link-local prefix.  Deprecated: This field is never set and will be removed in a future release.
     *
     * @return $this
     */
    public function setLinkLocalIPv6Address($linkLocalIPv6Address)
    {
        $this->container['linkLocalIPv6Address'] = $linkLocalIPv6Address;

        return $this;
    }

    /**
     * Gets linkLocalIPv6PrefixLen
     *
     * @return int
     */
    public function getLinkLocalIPv6PrefixLen()
    {
        return $this->container['linkLocalIPv6PrefixLen'];
    }

    /**
     * Sets linkLocalIPv6PrefixLen
     *
     * @param int $linkLocalIPv6PrefixLen Prefix length of the IPv6 unicast address.  Deprecated: This field is never set and will be removed in a future release.
     *
     * @return $this
     */
    public function setLinkLocalIPv6PrefixLen($linkLocalIPv6PrefixLen)
    {
        $this->container['linkLocalIPv6PrefixLen'] = $linkLocalIPv6PrefixLen;

        return $this;
    }

    /**
     * Gets ports
     *
     * @return \Docker\API\Model\PortMap
     */
    public function getPorts()
    {
        return $this->container['ports'];
    }

    /**
     * Sets ports
     *
     * @param \Docker\API\Model\PortMap $ports ports
     *
     * @return $this
     */
    public function setPorts($ports)
    {
        $this->container['ports'] = $ports;

        return $this;
    }

    /**
     * Gets sandboxKey
     *
     * @return string
     */
    public function getSandboxKey()
    {
        return $this->container['sandboxKey'];
    }

    /**
     * Sets sandboxKey
     *
     * @param string $sandboxKey SandboxKey is the full path of the netns handle
     *
     * @return $this
     */
    public function setSandboxKey($sandboxKey)
    {
        $this->container['sandboxKey'] = $sandboxKey;

        return $this;
    }

    /**
     * Gets secondaryIPAddresses
     *
     * @return \Docker\API\Model\Address[]
     */
    public function getSecondaryIPAddresses()
    {
        return $this->container['secondaryIPAddresses'];
    }

    /**
     * Sets secondaryIPAddresses
     *
     * @param \Docker\API\Model\Address[] $secondaryIPAddresses Deprecated: This field is never set and will be removed in a future release.
     *
     * @return $this
     */
    public function setSecondaryIPAddresses($secondaryIPAddresses)
    {
        $this->container['secondaryIPAddresses'] = $secondaryIPAddresses;

        return $this;
    }

    /**
     * Gets secondaryIPv6Addresses
     *
     * @return \Docker\API\Model\Address[]
     */
    public function getSecondaryIPv6Addresses()
    {
        return $this->container['secondaryIPv6Addresses'];
    }

    /**
     * Sets secondaryIPv6Addresses
     *
     * @param \Docker\API\Model\Address[] $secondaryIPv6Addresses Deprecated: This field is never set and will be removed in a future release.
     *
     * @return $this
     */
    public function setSecondaryIPv6Addresses($secondaryIPv6Addresses)
    {
        $this->container['secondaryIPv6Addresses'] = $secondaryIPv6Addresses;

        return $this;
    }

    /**
     * Gets endpointID
     *
     * @return string
     */
    public function getEndpointID()
    {
        return $this->container['endpointID'];
    }

    /**
     * Sets endpointID
     *
     * @param string $endpointID EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setEndpointID($endpointID)
    {
        $this->container['endpointID'] = $endpointID;

        return $this;
    }

    /**
     * Gets gateway
     *
     * @return string
     */
    public function getGateway()
    {
        return $this->container['gateway'];
    }

    /**
     * Sets gateway
     *
     * @param string $gateway Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setGateway($gateway)
    {
        $this->container['gateway'] = $gateway;

        return $this;
    }

    /**
     * Gets globalIPv6Address
     *
     * @return string
     */
    public function getGlobalIPv6Address()
    {
        return $this->container['globalIPv6Address'];
    }

    /**
     * Sets globalIPv6Address
     *
     * @param string $globalIPv6Address Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setGlobalIPv6Address($globalIPv6Address)
    {
        $this->container['globalIPv6Address'] = $globalIPv6Address;

        return $this;
    }

    /**
     * Gets globalIPv6PrefixLen
     *
     * @return int
     */
    public function getGlobalIPv6PrefixLen()
    {
        return $this->container['globalIPv6PrefixLen'];
    }

    /**
     * Sets globalIPv6PrefixLen
     *
     * @param int $globalIPv6PrefixLen Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setGlobalIPv6PrefixLen($globalIPv6PrefixLen)
    {
        $this->container['globalIPv6PrefixLen'] = $globalIPv6PrefixLen;

        return $this;
    }

    /**
     * Gets iPAddress
     *
     * @return string
     */
    public function getIPAddress()
    {
        return $this->container['iPAddress'];
    }

    /**
     * Sets iPAddress
     *
     * @param string $iPAddress IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setIPAddress($iPAddress)
    {
        $this->container['iPAddress'] = $iPAddress;

        return $this;
    }

    /**
     * Gets iPPrefixLen
     *
     * @return int
     */
    public function getIPPrefixLen()
    {
        return $this->container['iPPrefixLen'];
    }

    /**
     * Sets iPPrefixLen
     *
     * @param int $iPPrefixLen Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setIPPrefixLen($iPPrefixLen)
    {
        $this->container['iPPrefixLen'] = $iPPrefixLen;

        return $this;
    }

    /**
     * Gets iPv6Gateway
     *
     * @return string
     */
    public function getIPv6Gateway()
    {
        return $this->container['iPv6Gateway'];
    }

    /**
     * Sets iPv6Gateway
     *
     * @param string $iPv6Gateway IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setIPv6Gateway($iPv6Gateway)
    {
        $this->container['iPv6Gateway'] = $iPv6Gateway;

        return $this;
    }

    /**
     * Gets macAddress
     *
     * @return string
     */
    public function getMacAddress()
    {
        return $this->container['macAddress'];
    }

    /**
     * Sets macAddress
     *
     * @param string $macAddress MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0
     *
     * @return $this
     */
    public function setMacAddress($macAddress)
    {
        $this->container['macAddress'] = $macAddress;

        return $this;
    }

    /**
     * Gets networks
     *
     * @return map[string,\Docker\API\Model\EndpointSettings]
     */
    public function getNetworks()
    {
        return $this->container['networks'];
    }

    /**
     * Sets networks
     *
     * @param map[string,\Docker\API\Model\EndpointSettings] $networks Information about all networks that the container is connected to.
     *
     * @return $this
     */
    public function setNetworks($networks)
    {
        $this->container['networks'] = $networks;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
