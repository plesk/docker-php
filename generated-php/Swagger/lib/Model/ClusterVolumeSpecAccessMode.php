<?php
/**
 * ClusterVolumeSpecAccessMode
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;

use \ArrayAccess;
use \Docker\API\ObjectSerializer;

/**
 * ClusterVolumeSpecAccessMode Class Doc Comment
 *
 * @category Class
 * @description Defines how the volume is used by tasks.
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClusterVolumeSpecAccessMode implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClusterVolumeSpec_AccessMode';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'scope' => 'string',
        'sharing' => 'string',
        'mountVolume' => 'object',
        'secrets' => '\Docker\API\Model\ClusterVolumeSpecAccessModeSecrets[]',
        'accessibilityRequirements' => '\Docker\API\Model\ClusterVolumeSpecAccessModeAccessibilityRequirements',
        'capacityRange' => '\Docker\API\Model\ClusterVolumeSpecAccessModeCapacityRange',
        'availability' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'scope' => null,
        'sharing' => null,
        'mountVolume' => null,
        'secrets' => null,
        'accessibilityRequirements' => null,
        'capacityRange' => null,
        'availability' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'scope' => 'Scope',
        'sharing' => 'Sharing',
        'mountVolume' => 'MountVolume',
        'secrets' => 'Secrets',
        'accessibilityRequirements' => 'AccessibilityRequirements',
        'capacityRange' => 'CapacityRange',
        'availability' => 'Availability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'scope' => 'setScope',
        'sharing' => 'setSharing',
        'mountVolume' => 'setMountVolume',
        'secrets' => 'setSecrets',
        'accessibilityRequirements' => 'setAccessibilityRequirements',
        'capacityRange' => 'setCapacityRange',
        'availability' => 'setAvailability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'scope' => 'getScope',
        'sharing' => 'getSharing',
        'mountVolume' => 'getMountVolume',
        'secrets' => 'getSecrets',
        'accessibilityRequirements' => 'getAccessibilityRequirements',
        'capacityRange' => 'getCapacityRange',
        'availability' => 'getAvailability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SCOPE_SINGLE = 'single';
    const SCOPE_MULTI = 'multi';
    const SHARING_NONE = 'none';
    const SHARING_READONLY = 'readonly';
    const SHARING_ONEWRITER = 'onewriter';
    const SHARING_ALL = 'all';
    const AVAILABILITY_ACTIVE = 'active';
    const AVAILABILITY_PAUSE = 'pause';
    const AVAILABILITY_DRAIN = 'drain';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getScopeAllowableValues()
    {
        return [
            self::SCOPE_SINGLE,
            self::SCOPE_MULTI,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSharingAllowableValues()
    {
        return [
            self::SHARING_NONE,
            self::SHARING_READONLY,
            self::SHARING_ONEWRITER,
            self::SHARING_ALL,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAvailabilityAllowableValues()
    {
        return [
            self::AVAILABILITY_ACTIVE
            self::AVAILABILITY_PAUSE
            self::AVAILABILITY_DRAIN
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['scope'] = isset($data['scope']) ? $data['scope'] : 'single';
        $this->container['sharing'] = isset($data['sharing']) ? $data['sharing'] : 'none';
        $this->container['mountVolume'] = isset($data['mountVolume']) ? $data['mountVolume'] : null;
        $this->container['secrets'] = isset($data['secrets']) ? $data['secrets'] : null;
        $this->container['accessibilityRequirements'] = isset($data['accessibilityRequirements']) ? $data['accessibilityRequirements'] : null;
        $this->container['capacityRange'] = isset($data['capacityRange']) ? $data['capacityRange'] : null;
        $this->container['availability'] = isset($data['availability']) ? $data['availability'] : 'active';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($this->container['scope']) && !in_array($this->container['scope'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'scope', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSharingAllowableValues();
        if (!is_null($this->container['sharing']) && !in_array($this->container['sharing'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sharing', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAvailabilityAllowableValues();
        if (!is_null($this->container['availability']) && !in_array($this->container['availability'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'availability', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets scope
     *
     * @return string
     */
    public function getScope()
    {
        return $this->container['scope'];
    }

    /**
     * Sets scope
     *
     * @param string $scope The set of nodes this volume can be used on at one time. - `single` The volume may only be scheduled to one node at a time. - `multi` the volume may be scheduled to any supported number of nodes at a time.
     *
     * @return $this
     */
    public function setScope($scope)
    {
        $allowedValues = $this->getScopeAllowableValues();
        if (!is_null($scope) && !in_array($scope, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'scope', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['scope'] = $scope;

        return $this;
    }

    /**
     * Gets sharing
     *
     * @return string
     */
    public function getSharing()
    {
        return $this->container['sharing'];
    }

    /**
     * Sets sharing
     *
     * @param string $sharing The number and way that different tasks can use this volume at one time. - `none` The volume may only be used by one task at a time. - `readonly` The volume may be used by any number of tasks, but they all must mount the volume as readonly - `onewriter` The volume may be used by any number of tasks, but only one may mount it as read/write. - `all` The volume may have any number of readers and writers.
     *
     * @return $this
     */
    public function setSharing($sharing)
    {
        $allowedValues = $this->getSharingAllowableValues();
        if (!is_null($sharing) && !in_array($sharing, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sharing', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sharing'] = $sharing;

        return $this;
    }

    /**
     * Gets mountVolume
     *
     * @return object
     */
    public function getMountVolume()
    {
        return $this->container['mountVolume'];
    }

    /**
     * Sets mountVolume
     *
     * @param object $mountVolume Options for using this volume as a Mount-type volume.      Either MountVolume or BlockVolume, but not both, must be     present.   properties:     FsType:       type: \"string\"       description: |         Specifies the filesystem type for the mount volume.         Optional.     MountFlags:       type: \"array\"       description: |         Flags to pass when mounting the volume. Optional.       items:         type: \"string\" BlockVolume:   type: \"object\"   description: |     Options for using this volume as a Block-type volume.     Intentionally empty.
     *
     * @return $this
     */
    public function setMountVolume($mountVolume)
    {
        $this->container['mountVolume'] = $mountVolume;

        return $this;
    }

    /**
     * Gets secrets
     *
     * @return \Docker\API\Model\ClusterVolumeSpecAccessModeSecrets[]
     */
    public function getSecrets()
    {
        return $this->container['secrets'];
    }

    /**
     * Sets secrets
     *
     * @param \Docker\API\Model\ClusterVolumeSpecAccessModeSecrets[] $secrets Swarm Secrets that are passed to the CSI storage plugin when operating on this volume.
     *
     * @return $this
     */
    public function setSecrets($secrets)
    {
        $this->container['secrets'] = $secrets;

        return $this;
    }

    /**
     * Gets accessibilityRequirements
     *
     * @return \Docker\API\Model\ClusterVolumeSpecAccessModeAccessibilityRequirements
     */
    public function getAccessibilityRequirements()
    {
        return $this->container['accessibilityRequirements'];
    }

    /**
     * Sets accessibilityRequirements
     *
     * @param \Docker\API\Model\ClusterVolumeSpecAccessModeAccessibilityRequirements $accessibilityRequirements accessibilityRequirements
     *
     * @return $this
     */
    public function setAccessibilityRequirements($accessibilityRequirements)
    {
        $this->container['accessibilityRequirements'] = $accessibilityRequirements;

        return $this;
    }

    /**
     * Gets capacityRange
     *
     * @return \Docker\API\Model\ClusterVolumeSpecAccessModeCapacityRange
     */
    public function getCapacityRange()
    {
        return $this->container['capacityRange'];
    }

    /**
     * Sets capacityRange
     *
     * @param \Docker\API\Model\ClusterVolumeSpecAccessModeCapacityRange $capacityRange capacityRange
     *
     * @return $this
     */
    public function setCapacityRange($capacityRange)
    {
        $this->container['capacityRange'] = $capacityRange;

        return $this;
    }

    /**
     * Gets availability
     *
     * @return string
     */
    public function getAvailability()
    {
        return $this->container['availability'];
    }

    /**
     * Sets availability
     *
     * @param string $availability The availability of the volume for use in tasks. - `active` The volume is fully available for scheduling on the cluster - `pause` No new workloads should use the volume, but existing workloads are not stopped. - `drain` All workloads using this volume should be stopped and rescheduled, and no new ones should be started.
     *
     * @return $this
     */
    public function setAvailability($availability)
    {
        $allowedValues = $this->getAvailabilityAllowableValues();
        if (!is_null($availability) && !in_array($availability, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'availability', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['availability'] = $availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
