<?php
/**
 * Task
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;

use \ArrayAccess;
use \Docker\API\ObjectSerializer;

/**
 * Task Class Doc Comment
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Task implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Task';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'iD' => 'string',
        'version' => '\Docker\API\Model\ObjectVersion',
        'createdAt' => 'string',
        'updatedAt' => 'string',
        'name' => 'string',
        'labels' => 'map[string,string]',
        'spec' => '\Docker\API\Model\TaskSpec',
        'serviceID' => 'string',
        'slot' => 'int',
        'nodeID' => 'string',
        'assignedGenericResources' => '\Docker\API\Model\GenericResources',
        'status' => '\Docker\API\Model\TaskStatus',
        'desiredState' => '\Docker\API\Model\TaskState',
        'jobIteration' => '\Docker\API\Model\ObjectVersion'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'iD' => null,
        'version' => null,
        'createdAt' => 'dateTime',
        'updatedAt' => 'dateTime',
        'name' => null,
        'labels' => null,
        'spec' => null,
        'serviceID' => null,
        'slot' => null,
        'nodeID' => null,
        'assignedGenericResources' => null,
        'status' => null,
        'desiredState' => null,
        'jobIteration' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'iD' => 'ID',
        'version' => 'Version',
        'createdAt' => 'CreatedAt',
        'updatedAt' => 'UpdatedAt',
        'name' => 'Name',
        'labels' => 'Labels',
        'spec' => 'Spec',
        'serviceID' => 'ServiceID',
        'slot' => 'Slot',
        'nodeID' => 'NodeID',
        'assignedGenericResources' => 'AssignedGenericResources',
        'status' => 'Status',
        'desiredState' => 'DesiredState',
        'jobIteration' => 'JobIteration'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'iD' => 'setID',
        'version' => 'setVersion',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt',
        'name' => 'setName',
        'labels' => 'setLabels',
        'spec' => 'setSpec',
        'serviceID' => 'setServiceID',
        'slot' => 'setSlot',
        'nodeID' => 'setNodeID',
        'assignedGenericResources' => 'setAssignedGenericResources',
        'status' => 'setStatus',
        'desiredState' => 'setDesiredState',
        'jobIteration' => 'setJobIteration'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'iD' => 'getID',
        'version' => 'getVersion',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt',
        'name' => 'getName',
        'labels' => 'getLabels',
        'spec' => 'getSpec',
        'serviceID' => 'getServiceID',
        'slot' => 'getSlot',
        'nodeID' => 'getNodeID',
        'assignedGenericResources' => 'getAssignedGenericResources',
        'status' => 'getStatus',
        'desiredState' => 'getDesiredState',
        'jobIteration' => 'getJobIteration'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['iD'] = isset($data['iD']) ? $data['iD'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['updatedAt'] = isset($data['updatedAt']) ? $data['updatedAt'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['spec'] = isset($data['spec']) ? $data['spec'] : null;
        $this->container['serviceID'] = isset($data['serviceID']) ? $data['serviceID'] : null;
        $this->container['slot'] = isset($data['slot']) ? $data['slot'] : null;
        $this->container['nodeID'] = isset($data['nodeID']) ? $data['nodeID'] : null;
        $this->container['assignedGenericResources'] = isset($data['assignedGenericResources']) ? $data['assignedGenericResources'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['desiredState'] = isset($data['desiredState']) ? $data['desiredState'] : null;
        $this->container['jobIteration'] = isset($data['jobIteration']) ? $data['jobIteration'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets iD
     *
     * @return string
     */
    public function getID()
    {
        return $this->container['iD'];
    }

    /**
     * Sets iD
     *
     * @param string $iD The ID of the task.
     *
     * @return $this
     */
    public function setID($iD)
    {
        $this->container['iD'] = $iD;

        return $this;
    }

    /**
     * Gets version
     *
     * @return \Docker\API\Model\ObjectVersion
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param \Docker\API\Model\ObjectVersion $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param string $createdAt createdAt
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param string $updatedAt updatedAt
     *
     * @return $this
     */
    public function setUpdatedAt($updatedAt)
    {
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the task.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return map[string,string]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param map[string,string] $labels User-defined key/value metadata.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets spec
     *
     * @return \Docker\API\Model\TaskSpec
     */
    public function getSpec()
    {
        return $this->container['spec'];
    }

    /**
     * Sets spec
     *
     * @param \Docker\API\Model\TaskSpec $spec spec
     *
     * @return $this
     */
    public function setSpec($spec)
    {
        $this->container['spec'] = $spec;

        return $this;
    }

    /**
     * Gets serviceID
     *
     * @return string
     */
    public function getServiceID()
    {
        return $this->container['serviceID'];
    }

    /**
     * Sets serviceID
     *
     * @param string $serviceID The ID of the service this task is part of.
     *
     * @return $this
     */
    public function setServiceID($serviceID)
    {
        $this->container['serviceID'] = $serviceID;

        return $this;
    }

    /**
     * Gets slot
     *
     * @return int
     */
    public function getSlot()
    {
        return $this->container['slot'];
    }

    /**
     * Sets slot
     *
     * @param int $slot slot
     *
     * @return $this
     */
    public function setSlot($slot)
    {
        $this->container['slot'] = $slot;

        return $this;
    }

    /**
     * Gets nodeID
     *
     * @return string
     */
    public function getNodeID()
    {
        return $this->container['nodeID'];
    }

    /**
     * Sets nodeID
     *
     * @param string $nodeID The ID of the node that this task is on.
     *
     * @return $this
     */
    public function setNodeID($nodeID)
    {
        $this->container['nodeID'] = $nodeID;

        return $this;
    }

    /**
     * Gets assignedGenericResources
     *
     * @return \Docker\API\Model\GenericResources
     */
    public function getAssignedGenericResources()
    {
        return $this->container['assignedGenericResources'];
    }

    /**
     * Sets assignedGenericResources
     *
     * @param \Docker\API\Model\GenericResources $assignedGenericResources assignedGenericResources
     *
     * @return $this
     */
    public function setAssignedGenericResources($assignedGenericResources)
    {
        $this->container['assignedGenericResources'] = $assignedGenericResources;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Docker\API\Model\TaskStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Docker\API\Model\TaskStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets desiredState
     *
     * @return \Docker\API\Model\TaskState
     */
    public function getDesiredState()
    {
        return $this->container['desiredState'];
    }

    /**
     * Sets desiredState
     *
     * @param \Docker\API\Model\TaskState $desiredState desiredState
     *
     * @return $this
     */
    public function setDesiredState($desiredState)
    {
        $this->container['desiredState'] = $desiredState;

        return $this;
    }

    /**
     * Gets jobIteration
     *
     * @return \Docker\API\Model\ObjectVersion
     */
    public function getJobIteration()
    {
        return $this->container['jobIteration'];
    }

    /**
     * Sets jobIteration
     *
     * @param \Docker\API\Model\ObjectVersion $jobIteration jobIteration
     *
     * @return $this
     */
    public function setJobIteration($jobIteration)
    {
        $this->container['jobIteration'] = $jobIteration;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
