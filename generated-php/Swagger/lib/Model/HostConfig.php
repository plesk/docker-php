<?php
/**
 * HostConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;
use \Docker\API\ObjectSerializer;

/**
 * HostConfig Class Doc Comment
 *
 * @category Class
 * @description Container configuration that depends on the host we are running on
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HostConfig extends Resources 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HostConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'binds' => 'string[]',
        'containerIDFile' => 'string',
        'logConfig' => '\Docker\API\Model\HostConfigLogConfig',
        'networkMode' => 'string',
        'portBindings' => '\Docker\API\Model\PortMap',
        'restartPolicy' => '\Docker\API\Model\RestartPolicy',
        'autoRemove' => 'bool',
        'volumeDriver' => 'string',
        'volumesFrom' => 'string[]',
        'mounts' => '\Docker\API\Model\Mount[]',
        'consoleSize' => 'int[]',
        'annotations' => 'map[string,string]',
        'capAdd' => 'string[]',
        'capDrop' => 'string[]',
        'cgroupnsMode' => 'string',
        'dns' => 'string[]',
        'dnsOptions' => 'string[]',
        'dnsSearch' => 'string[]',
        'extraHosts' => 'string[]',
        'groupAdd' => 'string[]',
        'ipcMode' => 'string',
        'cgroup' => 'string',
        'links' => 'string[]',
        'oomScoreAdj' => 'int',
        'pidMode' => 'string',
        'privileged' => 'bool',
        'publishAllPorts' => 'bool',
        'readonlyRootfs' => 'bool',
        'securityOpt' => 'string[]',
        'storageOpt' => 'map[string,string]',
        'tmpfs' => 'map[string,string]',
        'uTSMode' => 'string',
        'usernsMode' => 'string',
        'shmSize' => 'int',
        'sysctls' => 'map[string,string]',
        'runtime' => 'string',
        'isolation' => 'string',
        'maskedPaths' => 'string[]',
        'readonlyPaths' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'binds' => null,
        'containerIDFile' => null,
        'logConfig' => null,
        'networkMode' => null,
        'portBindings' => null,
        'restartPolicy' => null,
        'autoRemove' => null,
        'volumeDriver' => null,
        'volumesFrom' => null,
        'mounts' => null,
        'consoleSize' => null,
        'annotations' => null,
        'capAdd' => null,
        'capDrop' => null,
        'cgroupnsMode' => null,
        'dns' => null,
        'dnsOptions' => null,
        'dnsSearch' => null,
        'extraHosts' => null,
        'groupAdd' => null,
        'ipcMode' => null,
        'cgroup' => null,
        'links' => null,
        'oomScoreAdj' => null,
        'pidMode' => null,
        'privileged' => null,
        'publishAllPorts' => null,
        'readonlyRootfs' => null,
        'securityOpt' => null,
        'storageOpt' => null,
        'tmpfs' => null,
        'uTSMode' => null,
        'usernsMode' => null,
        'shmSize' => 'int64',
        'sysctls' => null,
        'runtime' => null,
        'isolation' => null,
        'maskedPaths' => null,
        'readonlyPaths' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'binds' => 'Binds',
        'containerIDFile' => 'ContainerIDFile',
        'logConfig' => 'LogConfig',
        'networkMode' => 'NetworkMode',
        'portBindings' => 'PortBindings',
        'restartPolicy' => 'RestartPolicy',
        'autoRemove' => 'AutoRemove',
        'volumeDriver' => 'VolumeDriver',
        'volumesFrom' => 'VolumesFrom',
        'mounts' => 'Mounts',
        'consoleSize' => 'ConsoleSize',
        'annotations' => 'Annotations',
        'capAdd' => 'CapAdd',
        'capDrop' => 'CapDrop',
        'cgroupnsMode' => 'CgroupnsMode',
        'dns' => 'Dns',
        'dnsOptions' => 'DnsOptions',
        'dnsSearch' => 'DnsSearch',
        'extraHosts' => 'ExtraHosts',
        'groupAdd' => 'GroupAdd',
        'ipcMode' => 'IpcMode',
        'cgroup' => 'Cgroup',
        'links' => 'Links',
        'oomScoreAdj' => 'OomScoreAdj',
        'pidMode' => 'PidMode',
        'privileged' => 'Privileged',
        'publishAllPorts' => 'PublishAllPorts',
        'readonlyRootfs' => 'ReadonlyRootfs',
        'securityOpt' => 'SecurityOpt',
        'storageOpt' => 'StorageOpt',
        'tmpfs' => 'Tmpfs',
        'uTSMode' => 'UTSMode',
        'usernsMode' => 'UsernsMode',
        'shmSize' => 'ShmSize',
        'sysctls' => 'Sysctls',
        'runtime' => 'Runtime',
        'isolation' => 'Isolation',
        'maskedPaths' => 'MaskedPaths',
        'readonlyPaths' => 'ReadonlyPaths'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'binds' => 'setBinds',
        'containerIDFile' => 'setContainerIDFile',
        'logConfig' => 'setLogConfig',
        'networkMode' => 'setNetworkMode',
        'portBindings' => 'setPortBindings',
        'restartPolicy' => 'setRestartPolicy',
        'autoRemove' => 'setAutoRemove',
        'volumeDriver' => 'setVolumeDriver',
        'volumesFrom' => 'setVolumesFrom',
        'mounts' => 'setMounts',
        'consoleSize' => 'setConsoleSize',
        'annotations' => 'setAnnotations',
        'capAdd' => 'setCapAdd',
        'capDrop' => 'setCapDrop',
        'cgroupnsMode' => 'setCgroupnsMode',
        'dns' => 'setDns',
        'dnsOptions' => 'setDnsOptions',
        'dnsSearch' => 'setDnsSearch',
        'extraHosts' => 'setExtraHosts',
        'groupAdd' => 'setGroupAdd',
        'ipcMode' => 'setIpcMode',
        'cgroup' => 'setCgroup',
        'links' => 'setLinks',
        'oomScoreAdj' => 'setOomScoreAdj',
        'pidMode' => 'setPidMode',
        'privileged' => 'setPrivileged',
        'publishAllPorts' => 'setPublishAllPorts',
        'readonlyRootfs' => 'setReadonlyRootfs',
        'securityOpt' => 'setSecurityOpt',
        'storageOpt' => 'setStorageOpt',
        'tmpfs' => 'setTmpfs',
        'uTSMode' => 'setUTSMode',
        'usernsMode' => 'setUsernsMode',
        'shmSize' => 'setShmSize',
        'sysctls' => 'setSysctls',
        'runtime' => 'setRuntime',
        'isolation' => 'setIsolation',
        'maskedPaths' => 'setMaskedPaths',
        'readonlyPaths' => 'setReadonlyPaths'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'binds' => 'getBinds',
        'containerIDFile' => 'getContainerIDFile',
        'logConfig' => 'getLogConfig',
        'networkMode' => 'getNetworkMode',
        'portBindings' => 'getPortBindings',
        'restartPolicy' => 'getRestartPolicy',
        'autoRemove' => 'getAutoRemove',
        'volumeDriver' => 'getVolumeDriver',
        'volumesFrom' => 'getVolumesFrom',
        'mounts' => 'getMounts',
        'consoleSize' => 'getConsoleSize',
        'annotations' => 'getAnnotations',
        'capAdd' => 'getCapAdd',
        'capDrop' => 'getCapDrop',
        'cgroupnsMode' => 'getCgroupnsMode',
        'dns' => 'getDns',
        'dnsOptions' => 'getDnsOptions',
        'dnsSearch' => 'getDnsSearch',
        'extraHosts' => 'getExtraHosts',
        'groupAdd' => 'getGroupAdd',
        'ipcMode' => 'getIpcMode',
        'cgroup' => 'getCgroup',
        'links' => 'getLinks',
        'oomScoreAdj' => 'getOomScoreAdj',
        'pidMode' => 'getPidMode',
        'privileged' => 'getPrivileged',
        'publishAllPorts' => 'getPublishAllPorts',
        'readonlyRootfs' => 'getReadonlyRootfs',
        'securityOpt' => 'getSecurityOpt',
        'storageOpt' => 'getStorageOpt',
        'tmpfs' => 'getTmpfs',
        'uTSMode' => 'getUTSMode',
        'usernsMode' => 'getUsernsMode',
        'shmSize' => 'getShmSize',
        'sysctls' => 'getSysctls',
        'runtime' => 'getRuntime',
        'isolation' => 'getIsolation',
        'maskedPaths' => 'getMaskedPaths',
        'readonlyPaths' => 'getReadonlyPaths'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CGROUPNS_MODE__PRIVATE = 'private';
    const CGROUPNS_MODE_HOST = 'host';
    const ISOLATION__DEFAULT = 'default';
    const ISOLATION_PROCESS = 'process';
    const ISOLATION_HYPERV = 'hyperv';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCgroupnsModeAllowableValues()
    {
        return [
            self::CGROUPNS_MODE__PRIVATE,
            self::CGROUPNS_MODE_HOST,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsolationAllowableValues()
    {
        return [
            self::ISOLATION__DEFAULT,
            self::ISOLATION_PROCESS,
            self::ISOLATION_HYPERV,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        parent::__construct($data);

        $this->container['binds'] = isset($data['binds']) ? $data['binds'] : null;
        $this->container['containerIDFile'] = isset($data['containerIDFile']) ? $data['containerIDFile'] : null;
        $this->container['logConfig'] = isset($data['logConfig']) ? $data['logConfig'] : null;
        $this->container['networkMode'] = isset($data['networkMode']) ? $data['networkMode'] : null;
        $this->container['portBindings'] = isset($data['portBindings']) ? $data['portBindings'] : null;
        $this->container['restartPolicy'] = isset($data['restartPolicy']) ? $data['restartPolicy'] : null;
        $this->container['autoRemove'] = isset($data['autoRemove']) ? $data['autoRemove'] : null;
        $this->container['volumeDriver'] = isset($data['volumeDriver']) ? $data['volumeDriver'] : null;
        $this->container['volumesFrom'] = isset($data['volumesFrom']) ? $data['volumesFrom'] : null;
        $this->container['mounts'] = isset($data['mounts']) ? $data['mounts'] : null;
        $this->container['consoleSize'] = isset($data['consoleSize']) ? $data['consoleSize'] : null;
        $this->container['annotations'] = isset($data['annotations']) ? $data['annotations'] : null;
        $this->container['capAdd'] = isset($data['capAdd']) ? $data['capAdd'] : null;
        $this->container['capDrop'] = isset($data['capDrop']) ? $data['capDrop'] : null;
        $this->container['cgroupnsMode'] = isset($data['cgroupnsMode']) ? $data['cgroupnsMode'] : null;
        $this->container['dns'] = isset($data['dns']) ? $data['dns'] : null;
        $this->container['dnsOptions'] = isset($data['dnsOptions']) ? $data['dnsOptions'] : null;
        $this->container['dnsSearch'] = isset($data['dnsSearch']) ? $data['dnsSearch'] : null;
        $this->container['extraHosts'] = isset($data['extraHosts']) ? $data['extraHosts'] : null;
        $this->container['groupAdd'] = isset($data['groupAdd']) ? $data['groupAdd'] : null;
        $this->container['ipcMode'] = isset($data['ipcMode']) ? $data['ipcMode'] : null;
        $this->container['cgroup'] = isset($data['cgroup']) ? $data['cgroup'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['oomScoreAdj'] = isset($data['oomScoreAdj']) ? $data['oomScoreAdj'] : null;
        $this->container['pidMode'] = isset($data['pidMode']) ? $data['pidMode'] : null;
        $this->container['privileged'] = isset($data['privileged']) ? $data['privileged'] : null;
        $this->container['publishAllPorts'] = isset($data['publishAllPorts']) ? $data['publishAllPorts'] : null;
        $this->container['readonlyRootfs'] = isset($data['readonlyRootfs']) ? $data['readonlyRootfs'] : null;
        $this->container['securityOpt'] = isset($data['securityOpt']) ? $data['securityOpt'] : null;
        $this->container['storageOpt'] = isset($data['storageOpt']) ? $data['storageOpt'] : null;
        $this->container['tmpfs'] = isset($data['tmpfs']) ? $data['tmpfs'] : null;
        $this->container['uTSMode'] = isset($data['uTSMode']) ? $data['uTSMode'] : null;
        $this->container['usernsMode'] = isset($data['usernsMode']) ? $data['usernsMode'] : null;
        $this->container['shmSize'] = isset($data['shmSize']) ? $data['shmSize'] : null;
        $this->container['sysctls'] = isset($data['sysctls']) ? $data['sysctls'] : null;
        $this->container['runtime'] = isset($data['runtime']) ? $data['runtime'] : null;
        $this->container['isolation'] = isset($data['isolation']) ? $data['isolation'] : null;
        $this->container['maskedPaths'] = isset($data['maskedPaths']) ? $data['maskedPaths'] : null;
        $this->container['readonlyPaths'] = isset($data['readonlyPaths']) ? $data['readonlyPaths'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getCgroupnsModeAllowableValues();
        if (!is_null($this->container['cgroupnsMode']) && !in_array($this->container['cgroupnsMode'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cgroupnsMode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($this->container['isolation']) && !in_array($this->container['isolation'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'isolation', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets binds
     *
     * @return string[]
     */
    public function getBinds()
    {
        return $this->container['binds'];
    }

    /**
     * Sets binds
     *
     * @param string[] $binds A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest[:options]` to bind-mount a host path   into the container. Both `host-src`, and `container-dest` must   be an _absolute_ path. - `volume-name:container-dest[:options]` to bind-mount a volume   managed by a volume driver into the container. `container-dest`   must be an _absolute_ path.  `options` is an optional, comma-delimited list of:  - `nocopy` disables automatic copying of data from the container   path to the volume. The `nocopy` flag only applies to named volumes. - `[ro|rw]` mounts a volume read-only or read-write, respectively.   If omitted or set to `rw`, volumes are mounted read-write. - `[z|Z]` applies SELinux labels to allow or deny multiple containers   to read and write to the same volume.     - `z`: a _shared_ content label is applied to the content. This       label indicates that multiple containers can share the volume       content, for both reading and writing.     - `Z`: a _private unshared_ label is applied to the content.       This label indicates that only the current container can use       a private volume. Labeling systems such as SELinux require       proper labels to be placed on volume content that is mounted       into a container. Without a label, the security system can       prevent a container's processes from using the content. By       default, the labels set by the host operating system are not       modified. - `[[r]shared|[r]slave|[r]private]` specifies mount   [propagation behavior](https://www.kernel.org/doc/Documentation/filesystems/sharedsubtree.txt).   This only applies to bind-mounted volumes, not internal volumes   or named volumes. Mount propagation requires the source mount   point (the location where the source directory is mounted in the   host operating system) to have the correct propagation properties.   For shared volumes, the source mount point must be set to `shared`.   For slave volumes, the mount must be set to either `shared` or   `slave`.
     *
     * @return $this
     */
    public function setBinds($binds)
    {
        $this->container['binds'] = $binds;

        return $this;
    }

    /**
     * Gets containerIDFile
     *
     * @return string
     */
    public function getContainerIDFile()
    {
        return $this->container['containerIDFile'];
    }

    /**
     * Sets containerIDFile
     *
     * @param string $containerIDFile Path to a file where the container ID is written
     *
     * @return $this
     */
    public function setContainerIDFile($containerIDFile)
    {
        $this->container['containerIDFile'] = $containerIDFile;

        return $this;
    }

    /**
     * Gets logConfig
     *
     * @return \Docker\API\Model\HostConfigLogConfig
     */
    public function getLogConfig()
    {
        return $this->container['logConfig'];
    }

    /**
     * Sets logConfig
     *
     * @param \Docker\API\Model\HostConfigLogConfig $logConfig logConfig
     *
     * @return $this
     */
    public function setLogConfig($logConfig)
    {
        $this->container['logConfig'] = $logConfig;

        return $this;
    }

    /**
     * Gets networkMode
     *
     * @return string
     */
    public function getNetworkMode()
    {
        return $this->container['networkMode'];
    }

    /**
     * Sets networkMode
     *
     * @param string $networkMode Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.
     *
     * @return $this
     */
    public function setNetworkMode($networkMode)
    {
        $this->container['networkMode'] = $networkMode;

        return $this;
    }

    /**
     * Gets portBindings
     *
     * @return \Docker\API\Model\PortMap
     */
    public function getPortBindings()
    {
        return $this->container['portBindings'];
    }

    /**
     * Sets portBindings
     *
     * @param \Docker\API\Model\PortMap $portBindings portBindings
     *
     * @return $this
     */
    public function setPortBindings($portBindings)
    {
        $this->container['portBindings'] = $portBindings;

        return $this;
    }

    /**
     * Gets restartPolicy
     *
     * @return \Docker\API\Model\RestartPolicy
     */
    public function getRestartPolicy()
    {
        return $this->container['restartPolicy'];
    }

    /**
     * Sets restartPolicy
     *
     * @param \Docker\API\Model\RestartPolicy $restartPolicy restartPolicy
     *
     * @return $this
     */
    public function setRestartPolicy($restartPolicy)
    {
        $this->container['restartPolicy'] = $restartPolicy;

        return $this;
    }

    /**
     * Gets autoRemove
     *
     * @return bool
     */
    public function getAutoRemove()
    {
        return $this->container['autoRemove'];
    }

    /**
     * Sets autoRemove
     *
     * @param bool $autoRemove Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.
     *
     * @return $this
     */
    public function setAutoRemove($autoRemove)
    {
        $this->container['autoRemove'] = $autoRemove;

        return $this;
    }

    /**
     * Gets volumeDriver
     *
     * @return string
     */
    public function getVolumeDriver()
    {
        return $this->container['volumeDriver'];
    }

    /**
     * Sets volumeDriver
     *
     * @param string $volumeDriver Driver that this container uses to mount volumes.
     *
     * @return $this
     */
    public function setVolumeDriver($volumeDriver)
    {
        $this->container['volumeDriver'] = $volumeDriver;

        return $this;
    }

    /**
     * Gets volumesFrom
     *
     * @return string[]
     */
    public function getVolumesFrom()
    {
        return $this->container['volumesFrom'];
    }

    /**
     * Sets volumesFrom
     *
     * @param string[] $volumesFrom A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.
     *
     * @return $this
     */
    public function setVolumesFrom($volumesFrom)
    {
        $this->container['volumesFrom'] = $volumesFrom;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \Docker\API\Model\Mount[]
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \Docker\API\Model\Mount[] $mounts Specification for mounts to be added to the container.
     *
     * @return $this
     */
    public function setMounts($mounts)
    {
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets consoleSize
     *
     * @return int[]
     */
    public function getConsoleSize()
    {
        return $this->container['consoleSize'];
    }

    /**
     * Sets consoleSize
     *
     * @param int[] $consoleSize Initial console size, as an `[height, width]` array.
     *
     * @return $this
     */
    public function setConsoleSize($consoleSize)
    {
        $this->container['consoleSize'] = $consoleSize;

        return $this;
    }

    /**
     * Gets annotations
     *
     * @return map[string,string]
     */
    public function getAnnotations()
    {
        return $this->container['annotations'];
    }

    /**
     * Sets annotations
     *
     * @param map[string,string] $annotations Arbitrary non-identifying metadata attached to container and provided to the runtime when the container is started.
     *
     * @return $this
     */
    public function setAnnotations($annotations)
    {
        $this->container['annotations'] = $annotations;

        return $this;
    }

    /**
     * Gets capAdd
     *
     * @return string[]
     */
    public function getCapAdd()
    {
        return $this->container['capAdd'];
    }

    /**
     * Sets capAdd
     *
     * @param string[] $capAdd A list of kernel capabilities to add to the container. Conflicts with option 'Capabilities'.
     *
     * @return $this
     */
    public function setCapAdd($capAdd)
    {
        $this->container['capAdd'] = $capAdd;

        return $this;
    }

    /**
     * Gets capDrop
     *
     * @return string[]
     */
    public function getCapDrop()
    {
        return $this->container['capDrop'];
    }

    /**
     * Sets capDrop
     *
     * @param string[] $capDrop A list of kernel capabilities to drop from the container. Conflicts with option 'Capabilities'.
     *
     * @return $this
     */
    public function setCapDrop($capDrop)
    {
        $this->container['capDrop'] = $capDrop;

        return $this;
    }

    /**
     * Gets cgroupnsMode
     *
     * @return string
     */
    public function getCgroupnsMode()
    {
        return $this->container['cgroupnsMode'];
    }

    /**
     * Sets cgroupnsMode
     *
     * @param string $cgroupnsMode cgroup namespace mode for the container. Possible values are:  - `\"private\"`: the container runs in its own private cgroup namespace - `\"host\"`: use the host system's cgroup namespace  If not specified, the daemon default is used, which can either be `\"private\"` or `\"host\"`, depending on daemon version, kernel support and configuration.
     *
     * @return $this
     */
    public function setCgroupnsMode($cgroupnsMode)
    {
        $allowedValues = $this->getCgroupnsModeAllowableValues();
        if (!is_null($cgroupnsMode) && !in_array($cgroupnsMode, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cgroupnsMode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cgroupnsMode'] = $cgroupnsMode;

        return $this;
    }

    /**
     * Gets dns
     *
     * @return string[]
     */
    public function getDns()
    {
        return $this->container['dns'];
    }

    /**
     * Sets dns
     *
     * @param string[] $dns A list of DNS servers for the container to use.
     *
     * @return $this
     */
    public function setDns($dns)
    {
        $this->container['dns'] = $dns;

        return $this;
    }

    /**
     * Gets dnsOptions
     *
     * @return string[]
     */
    public function getDnsOptions()
    {
        return $this->container['dnsOptions'];
    }

    /**
     * Sets dnsOptions
     *
     * @param string[] $dnsOptions A list of DNS options.
     *
     * @return $this
     */
    public function setDnsOptions($dnsOptions)
    {
        $this->container['dnsOptions'] = $dnsOptions;

        return $this;
    }

    /**
     * Gets dnsSearch
     *
     * @return string[]
     */
    public function getDnsSearch()
    {
        return $this->container['dnsSearch'];
    }

    /**
     * Sets dnsSearch
     *
     * @param string[] $dnsSearch A list of DNS search domains.
     *
     * @return $this
     */
    public function setDnsSearch($dnsSearch)
    {
        $this->container['dnsSearch'] = $dnsSearch;

        return $this;
    }

    /**
     * Gets extraHosts
     *
     * @return string[]
     */
    public function getExtraHosts()
    {
        return $this->container['extraHosts'];
    }

    /**
     * Sets extraHosts
     *
     * @param string[] $extraHosts A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.
     *
     * @return $this
     */
    public function setExtraHosts($extraHosts)
    {
        $this->container['extraHosts'] = $extraHosts;

        return $this;
    }

    /**
     * Gets groupAdd
     *
     * @return string[]
     */
    public function getGroupAdd()
    {
        return $this->container['groupAdd'];
    }

    /**
     * Sets groupAdd
     *
     * @param string[] $groupAdd A list of additional groups that the container process will run as.
     *
     * @return $this
     */
    public function setGroupAdd($groupAdd)
    {
        $this->container['groupAdd'] = $groupAdd;

        return $this;
    }

    /**
     * Gets ipcMode
     *
     * @return string
     */
    public function getIpcMode()
    {
        return $this->container['ipcMode'];
    }

    /**
     * Sets ipcMode
     *
     * @param string $ipcMode IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.
     *
     * @return $this
     */
    public function setIpcMode($ipcMode)
    {
        $this->container['ipcMode'] = $ipcMode;

        return $this;
    }

    /**
     * Gets cgroup
     *
     * @return string
     */
    public function getCgroup()
    {
        return $this->container['cgroup'];
    }

    /**
     * Sets cgroup
     *
     * @param string $cgroup Cgroup to use for the container.
     *
     * @return $this
     */
    public function setCgroup($cgroup)
    {
        $this->container['cgroup'] = $cgroup;

        return $this;
    }

    /**
     * Gets links
     *
     * @return string[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string[] $links A list of links for the container in the form `container_name:alias`.
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets oomScoreAdj
     *
     * @return int
     */
    public function getOomScoreAdj()
    {
        return $this->container['oomScoreAdj'];
    }

    /**
     * Sets oomScoreAdj
     *
     * @param int $oomScoreAdj An integer value containing the score given to the container in order to tune OOM killer preferences.
     *
     * @return $this
     */
    public function setOomScoreAdj($oomScoreAdj)
    {
        $this->container['oomScoreAdj'] = $oomScoreAdj;

        return $this;
    }

    /**
     * Gets pidMode
     *
     * @return string
     */
    public function getPidMode()
    {
        return $this->container['pidMode'];
    }

    /**
     * Sets pidMode
     *
     * @param string $pidMode Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container
     *
     * @return $this
     */
    public function setPidMode($pidMode)
    {
        $this->container['pidMode'] = $pidMode;

        return $this;
    }

    /**
     * Gets privileged
     *
     * @return bool
     */
    public function getPrivileged()
    {
        return $this->container['privileged'];
    }

    /**
     * Sets privileged
     *
     * @param bool $privileged Gives the container full access to the host.
     *
     * @return $this
     */
    public function setPrivileged($privileged)
    {
        $this->container['privileged'] = $privileged;

        return $this;
    }

    /**
     * Gets publishAllPorts
     *
     * @return bool
     */
    public function getPublishAllPorts()
    {
        return $this->container['publishAllPorts'];
    }

    /**
     * Sets publishAllPorts
     *
     * @param bool $publishAllPorts Allocates an ephemeral host port for all of a container's exposed ports.  Ports are de-allocated when the container stops and allocated when the container starts. The allocated port might be changed when restarting the container.  The port is selected from the ephemeral port range that depends on the kernel. For example, on Linux the range is defined by `/proc/sys/net/ipv4/ip_local_port_range`.
     *
     * @return $this
     */
    public function setPublishAllPorts($publishAllPorts)
    {
        $this->container['publishAllPorts'] = $publishAllPorts;

        return $this;
    }

    /**
     * Gets readonlyRootfs
     *
     * @return bool
     */
    public function getReadonlyRootfs()
    {
        return $this->container['readonlyRootfs'];
    }

    /**
     * Sets readonlyRootfs
     *
     * @param bool $readonlyRootfs Mount the container's root filesystem as read only.
     *
     * @return $this
     */
    public function setReadonlyRootfs($readonlyRootfs)
    {
        $this->container['readonlyRootfs'] = $readonlyRootfs;

        return $this;
    }

    /**
     * Gets securityOpt
     *
     * @return string[]
     */
    public function getSecurityOpt()
    {
        return $this->container['securityOpt'];
    }

    /**
     * Sets securityOpt
     *
     * @param string[] $securityOpt A list of string values to customize labels for MLS systems, such as SELinux.
     *
     * @return $this
     */
    public function setSecurityOpt($securityOpt)
    {
        $this->container['securityOpt'] = $securityOpt;

        return $this;
    }

    /**
     * Gets storageOpt
     *
     * @return map[string,string]
     */
    public function getStorageOpt()
    {
        return $this->container['storageOpt'];
    }

    /**
     * Sets storageOpt
     *
     * @param map[string,string] $storageOpt Storage driver options for this container, in the form `{\"size\": \"120G\"}`.
     *
     * @return $this
     */
    public function setStorageOpt($storageOpt)
    {
        $this->container['storageOpt'] = $storageOpt;

        return $this;
    }

    /**
     * Gets tmpfs
     *
     * @return map[string,string]
     */
    public function getTmpfs()
    {
        return $this->container['tmpfs'];
    }

    /**
     * Sets tmpfs
     *
     * @param map[string,string] $tmpfs A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example:  ``` { \"/run\": \"rw,noexec,nosuid,size=65536k\" } ```
     *
     * @return $this
     */
    public function setTmpfs($tmpfs)
    {
        $this->container['tmpfs'] = $tmpfs;

        return $this;
    }

    /**
     * Gets uTSMode
     *
     * @return string
     */
    public function getUTSMode()
    {
        return $this->container['uTSMode'];
    }

    /**
     * Sets uTSMode
     *
     * @param string $uTSMode UTS namespace to use for the container.
     *
     * @return $this
     */
    public function setUTSMode($uTSMode)
    {
        $this->container['uTSMode'] = $uTSMode;

        return $this;
    }

    /**
     * Gets usernsMode
     *
     * @return string
     */
    public function getUsernsMode()
    {
        return $this->container['usernsMode'];
    }

    /**
     * Sets usernsMode
     *
     * @param string $usernsMode Sets the usernamespace mode for the container when usernamespace remapping option is enabled.
     *
     * @return $this
     */
    public function setUsernsMode($usernsMode)
    {
        $this->container['usernsMode'] = $usernsMode;

        return $this;
    }

    /**
     * Gets shmSize
     *
     * @return int
     */
    public function getShmSize()
    {
        return $this->container['shmSize'];
    }

    /**
     * Sets shmSize
     *
     * @param int $shmSize Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.
     *
     * @return $this
     */
    public function setShmSize($shmSize)
    {
        $this->container['shmSize'] = $shmSize;

        return $this;
    }

    /**
     * Gets sysctls
     *
     * @return map[string,string]
     */
    public function getSysctls()
    {
        return $this->container['sysctls'];
    }

    /**
     * Sets sysctls
     *
     * @param map[string,string] $sysctls A list of kernel parameters (sysctls) to set in the container. For example:  ``` {\"net.ipv4.ip_forward\": \"1\"} ```
     *
     * @return $this
     */
    public function setSysctls($sysctls)
    {
        $this->container['sysctls'] = $sysctls;

        return $this;
    }

    /**
     * Gets runtime
     *
     * @return string
     */
    public function getRuntime()
    {
        return $this->container['runtime'];
    }

    /**
     * Sets runtime
     *
     * @param string $runtime Runtime to use with this container.
     *
     * @return $this
     */
    public function setRuntime($runtime)
    {
        $this->container['runtime'] = $runtime;

        return $this;
    }

    /**
     * Gets isolation
     *
     * @return string
     */
    public function getIsolation()
    {
        return $this->container['isolation'];
    }

    /**
     * Sets isolation
     *
     * @param string $isolation Isolation technology of the container. (Windows only)
     *
     * @return $this
     */
    public function setIsolation($isolation)
    {
        $allowedValues = $this->getIsolationAllowableValues();
        if (!is_null($isolation) && !in_array($isolation, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'isolation', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isolation'] = $isolation;

        return $this;
    }

    /**
     * Gets maskedPaths
     *
     * @return string[]
     */
    public function getMaskedPaths()
    {
        return $this->container['maskedPaths'];
    }

    /**
     * Sets maskedPaths
     *
     * @param string[] $maskedPaths The list of paths to be masked inside the container (this overrides the default set of paths).
     *
     * @return $this
     */
    public function setMaskedPaths($maskedPaths)
    {
        $this->container['maskedPaths'] = $maskedPaths;

        return $this;
    }

    /**
     * Gets readonlyPaths
     *
     * @return string[]
     */
    public function getReadonlyPaths()
    {
        return $this->container['readonlyPaths'];
    }

    /**
     * Sets readonlyPaths
     *
     * @param string[] $readonlyPaths The list of paths to be set as read-only inside the container (this overrides the default set of paths).
     *
     * @return $this
     */
    public function setReadonlyPaths($readonlyPaths)
    {
        $this->container['readonlyPaths'] = $readonlyPaths;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
