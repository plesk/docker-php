<?php
/**
 * SwarmInitRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don't break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.47) is used. For example, calling `/info` is the same as calling `/v1.47/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ```
 *
 * OpenAPI spec version: 1.47
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.68
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Docker\API\Model;

use \ArrayAccess;
use \Docker\API\ObjectSerializer;

/**
 * SwarmInitRequest Class Doc Comment
 *
 * @category Class
 * @package  Docker\API
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwarmInitRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SwarmInitRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'listenAddr' => 'string',
        'advertiseAddr' => 'string',
        'dataPathAddr' => 'string',
        'dataPathPort' => 'int',
        'defaultAddrPool' => 'string[]',
        'forceNewCluster' => 'bool',
        'subnetSize' => 'int',
        'spec' => '\Docker\API\Model\SwarmSpec'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'listenAddr' => null,
        'advertiseAddr' => null,
        'dataPathAddr' => null,
        'dataPathPort' => 'uint32',
        'defaultAddrPool' => null,
        'forceNewCluster' => null,
        'subnetSize' => 'uint32',
        'spec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'listenAddr' => 'ListenAddr',
        'advertiseAddr' => 'AdvertiseAddr',
        'dataPathAddr' => 'DataPathAddr',
        'dataPathPort' => 'DataPathPort',
        'defaultAddrPool' => 'DefaultAddrPool',
        'forceNewCluster' => 'ForceNewCluster',
        'subnetSize' => 'SubnetSize',
        'spec' => 'Spec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'listenAddr' => 'setListenAddr',
        'advertiseAddr' => 'setAdvertiseAddr',
        'dataPathAddr' => 'setDataPathAddr',
        'dataPathPort' => 'setDataPathPort',
        'defaultAddrPool' => 'setDefaultAddrPool',
        'forceNewCluster' => 'setForceNewCluster',
        'subnetSize' => 'setSubnetSize',
        'spec' => 'setSpec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'listenAddr' => 'getListenAddr',
        'advertiseAddr' => 'getAdvertiseAddr',
        'dataPathAddr' => 'getDataPathAddr',
        'dataPathPort' => 'getDataPathPort',
        'defaultAddrPool' => 'getDefaultAddrPool',
        'forceNewCluster' => 'getForceNewCluster',
        'subnetSize' => 'getSubnetSize',
        'spec' => 'getSpec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['listenAddr'] = isset($data['listenAddr']) ? $data['listenAddr'] : null;
        $this->container['advertiseAddr'] = isset($data['advertiseAddr']) ? $data['advertiseAddr'] : null;
        $this->container['dataPathAddr'] = isset($data['dataPathAddr']) ? $data['dataPathAddr'] : null;
        $this->container['dataPathPort'] = isset($data['dataPathPort']) ? $data['dataPathPort'] : null;
        $this->container['defaultAddrPool'] = isset($data['defaultAddrPool']) ? $data['defaultAddrPool'] : null;
        $this->container['forceNewCluster'] = isset($data['forceNewCluster']) ? $data['forceNewCluster'] : null;
        $this->container['subnetSize'] = isset($data['subnetSize']) ? $data['subnetSize'] : null;
        $this->container['spec'] = isset($data['spec']) ? $data['spec'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets listenAddr
     *
     * @return string
     */
    public function getListenAddr()
    {
        return $this->container['listenAddr'];
    }

    /**
     * Sets listenAddr
     *
     * @param string $listenAddr Listen address used for inter-manager communication, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP). This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the default swarm listening port is used.
     *
     * @return $this
     */
    public function setListenAddr($listenAddr)
    {
        $this->container['listenAddr'] = $listenAddr;

        return $this;
    }

    /**
     * Gets advertiseAddr
     *
     * @return string
     */
    public function getAdvertiseAddr()
    {
        return $this->container['advertiseAddr'];
    }

    /**
     * Sets advertiseAddr
     *
     * @param string $advertiseAddr Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible.
     *
     * @return $this
     */
    public function setAdvertiseAddr($advertiseAddr)
    {
        $this->container['advertiseAddr'] = $advertiseAddr;

        return $this;
    }

    /**
     * Gets dataPathAddr
     *
     * @return string
     */
    public function getDataPathAddr()
    {
        return $this->container['dataPathAddr'];
    }

    /**
     * Sets dataPathAddr
     *
     * @param string $dataPathAddr Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other  nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster.
     *
     * @return $this
     */
    public function setDataPathAddr($dataPathAddr)
    {
        $this->container['dataPathAddr'] = $dataPathAddr;

        return $this;
    }

    /**
     * Gets dataPathPort
     *
     * @return int
     */
    public function getDataPathPort()
    {
        return $this->container['dataPathPort'];
    }

    /**
     * Sets dataPathPort
     *
     * @param int $dataPathPort DataPathPort specifies the data path port number for data traffic. Acceptable port range is 1024 to 49151. if no port is set or is set to 0, default port 4789 will be used.
     *
     * @return $this
     */
    public function setDataPathPort($dataPathPort)
    {
        $this->container['dataPathPort'] = $dataPathPort;

        return $this;
    }

    /**
     * Gets defaultAddrPool
     *
     * @return string[]
     */
    public function getDefaultAddrPool()
    {
        return $this->container['defaultAddrPool'];
    }

    /**
     * Sets defaultAddrPool
     *
     * @param string[] $defaultAddrPool Default Address Pool specifies default subnet pools for global scope networks.
     *
     * @return $this
     */
    public function setDefaultAddrPool($defaultAddrPool)
    {
        $this->container['defaultAddrPool'] = $defaultAddrPool;

        return $this;
    }

    /**
     * Gets forceNewCluster
     *
     * @return bool
     */
    public function getForceNewCluster()
    {
        return $this->container['forceNewCluster'];
    }

    /**
     * Sets forceNewCluster
     *
     * @param bool $forceNewCluster Force creation of a new swarm.
     *
     * @return $this
     */
    public function setForceNewCluster($forceNewCluster)
    {
        $this->container['forceNewCluster'] = $forceNewCluster;

        return $this;
    }

    /**
     * Gets subnetSize
     *
     * @return int
     */
    public function getSubnetSize()
    {
        return $this->container['subnetSize'];
    }

    /**
     * Sets subnetSize
     *
     * @param int $subnetSize SubnetSize specifies the subnet size of the networks created from the default subnet pool.
     *
     * @return $this
     */
    public function setSubnetSize($subnetSize)
    {
        $this->container['subnetSize'] = $subnetSize;

        return $this;
    }

    /**
     * Gets spec
     *
     * @return \Docker\API\Model\SwarmSpec
     */
    public function getSpec()
    {
        return $this->container['spec'];
    }

    /**
     * Sets spec
     *
     * @param \Docker\API\Model\SwarmSpec $spec spec
     *
     * @return $this
     */
    public function setSpec($spec)
    {
        $this->container['spec'] = $spec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
